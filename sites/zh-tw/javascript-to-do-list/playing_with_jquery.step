goals do
  goal "把 JavaScript 程式寫到 .js 檔案裡面"
  goal "利用 jQuery 寫一個函式 （這個函式叫做 addItemToPage）"
end

overview do
  message <<-MARKDOWN

JavaScript 除了是一個強大的程式語言，它還能讓你的網站具有互動性。

從簡單的動畫到大型網站（例如： Twitter、Github）你都能打造出來。

JavaScript 給你完全的控制權，可以增加、刪除、修改 用HTML做出來的內容，也可以改變 CSS的 style、增加或移除 元素的 class、id...等等。

這堂課，我們會使用 jQuery 讓網頁互動簡單一些。
jQuery 是 JavaScript 的其中一個函式庫，廣泛用在網站前端工程：改變網頁、送出請求、建立動畫效果...

為了在清單裡面增加代辦事項，我們來建立一個函式吧～
  MARKDOWN
end

steps do
  step do
    message <<-MARKDOWN

  除了在瀏覽器的控制台（console）寫入 JavaScript 之外，也可以寫在 .js 檔案。
  當瀏覽器讀取網頁的時候，app.js 這個檔案會被執行，我們會把程式碼寫在這邊。

  在這個步驟，我們將在 app.js 使用 jQuery 選擇器來宣告變數。
  在文字編輯器打開 app.js，輸入下面的程式。
    MARKDOWN

    source_code :javascript, <<-JAVASCRIPT
     var itemTemplate = $('#templates .item')
     var list         = $('#list')
    JAVASCRIPT

    message <<-MARKDOWN

  瀏覽器重新整理網頁，打開控制台接著輸入 'itemTemplate' 還有 'list'

  你看到什麼？

  list 跟 itemTemplate 有哪些函式可以使用？
    MARKDOWN
  end


  step do
    message <<-MARKDOWN

寫一個函式來增加代辦事項。

流程：增加一份 itemTemplate 的拷貝（宣告叫做 item），增加一些資料到 item，
然後把整份 item 增加(append)到 list element的後面（list element 內部）

在 app.js 下方加入以下程式碼。

    MARKDOWN

    source_code :javascript, <<-JAVASCRIPT
      var addItemToPage = function(itemData) {
        var item = itemTemplate.clone()
        item.attr('data-id',itemData.id)
        item.find('.description').text(itemData.description)
        if(itemData.completed) {
          item.addClass('completed')
        }
        list.append(item)
      }
    JAVASCRIPT

    message <<-MARKDOWN

重新整理頁面，接著我們可以用這個新建立的函式了！在控制台輸入以下程式

    MARKDOWN

    source_code :javascript, <<-JAVASCRIPT
      var orange = { description: 'Orange', id: 9000, completed: false }
      addItemToPage(orange)
    JAVASCRIPT

      message <<-MARKDOWN

  看看網頁，清單現在多了一個 orange 代辦事項~

    MARKDOWN
  end

end



explanation do
  message <<-MARKDOWN

You just used JavaScript to update a page! Websites do this all time, in order to make
the user experience interactive and seamless. You used a couple of handy jQuery functions:

* __The jQuery Selector $()__ is an easy way to fetch an item from the page. All you need to do
is specify the class, id, or tag of the element or elements you want.

* __.clone()__ creates a copy of a selected element. It's helpful for creating elements from a template.

* __.find()__ helps you find elements nested inside other elements.

* __.text()__ allows you to get and alter the text of an element.

* __.attr()__ allows you to get and alter attributes stored in your HTML. In this case, we used it store
the id of an item in a data-id attribute, that is not used for styling, just for data storage.

* __.addClass()__ allows you to add a class to an element.

* __.append()__ takes an element and attaches it to the end of another element! That way, your element
will actually show up on the page.

There are many other jQuery functions that are helpful – we'll use more as we go along. In the meantime,
play around in the developer console and see what you can change on the page using JavaScript and jQuery!
  MARKDOWN
end

next_step "creating_a_list"
